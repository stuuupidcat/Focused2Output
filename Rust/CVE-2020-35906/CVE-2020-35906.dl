.type Capture = ZeroCap {}
              | ArcWakeTraitCap {arcWakeTrait: symbol, trait: symbol}
              | WakerGeneratorCap {function: symbol, trait: symbol, genericType: symbol, wakerGenerator: symbol}
              | WakerGeneratorWithStaticCap {function: symbol, trait: symbol, genericType: symbol, wakerGenerator: symbol}

.type Branch = ZeroBranch {}
             | WakerGeneratorWithStaticBr {_0: symbol, _1: symbol}
             | WakerGeneratorBr {_0: symbol}
             | ArcWakeTraitBr {_0: symbol, _1: symbol}

.type URI = [
    lang: symbol,
    file: symbol,
    element: symbol,
    branches: Branch,
    caps: Capture
]

.decl WakerGenerator(uri:URI)
.decl WakerGeneratorWithStatic(uri:URI)
.decl ArcWakeTrait(uri:URI)
.input WakerGenerator
.input WakerGeneratorWithStatic
.input ArcWakeTrait

.comp Main {
    .decl NameMatching(param0:URI, param1:URI)
    .decl WithStatic(param0:symbol)
    NameMatching(func, trait_def) :- WakerGenerator(func), func=[_attrFuncLang,_attrFuncFile,attrFuncElement,_attrFuncBr,$WakerGeneratorCap(_capFuncFunction,capFuncTrait,_capFuncGenericType,_capFuncWakerGenerator)], !WithStatic(attrFuncElement), ArcWakeTrait(trait_def), trait_def=[_attrTrait_defLang,_attrTrait_defFile,_attrTrait_defElement,_attrTrait_defBr,$ArcWakeTraitCap(_capTrait_defArcWakeTrait,capTrait_defTrait)], capFuncTrait=capTrait_defTrait.
    WithStatic(elem) :- WakerGeneratorWithStatic(waker), waker=[_attrWakerLang,_attrWakerFile,attrWakerElement,_attrWakerBr,_capwaker], attrWakerElement=elem.
}
.init mainInstance = Main
.output mainInstance.NameMatching(IO=file, rfc4180=true)

