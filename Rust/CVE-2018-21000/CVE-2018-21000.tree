_type = abstract_type | array_type | bounded_type | dynamic_type | function_type | generic_type | macro_invocation | metavariable | never_type | pointer_type | primitive_type | reference_type | removed_trait_bound | scoped_type_identifier | tuple_type | type_identifier | unit_type

_literal = boolean_literal | char_literal | float_literal | integer_literal | raw_string_literal | string_literal

_expression = boolean_literal | char_literal | float_literal | integer_literal | raw_string_literal | string_literal | array_expression | assignment_expression | async_block | await_expression | binary_expression | block | break_expression | call_expression | closure_expression | compound_assignment_expr | const_block | continue_expression | field_expression | for_expression | generic_function | identifier | if_expression | index_expression | loop_expression | macro_invocation | match_expression | metavariable | parenthesized_expression | range_expression | reference_expression | return_expression | scoped_identifier | self | struct_expression | try_block | try_expression | tuple_expression | type_cast_expression | unary_expression | unit_expression | unsafe_block | while_expression | yield_expression

_type_arguments = boolean_literal | char_literal | float_literal | integer_literal | raw_string_literal | string_literal | abstract_type | array_type | bounded_type | dynamic_type | function_type | generic_type | macro_invocation | metavariable | never_type | pointer_type | primitive_type | reference_type | removed_trait_bound | scoped_type_identifier | tuple_type | type_identifier | unit_type | block | lifetime | trait_bounds | type_binding

_function = boolean_literal | char_literal | float_literal | integer_literal | raw_string_literal | string_literal | array_expression | assignment_expression | async_block | await_expression | binary_expression | block | break_expression | call_expression | closure_expression | compound_assignment_expr | const_block | continue_expression | field_expression | for_expression | generic_function | identifier | if_expression | index_expression | loop_expression | macro_invocation | match_expression | metavariable | parenthesized_expression | reference_expression | return_expression | scoped_identifier | self | struct_expression | try_block | try_expression | tuple_expression | type_cast_expression | unary_expression | unit_expression | unsafe_block | while_expression | yield_expression

_pattern =  boolean_literal | char_literal | float_literal | integer_literal | negative_literal | raw_string_literal | string_literal | captured_pattern | const_block | identifier | macro_invocation | mut_pattern | or_pattern | range_pattern | ref_pattern | reference_pattern | remaining_field_pattern | scoped_identifier | slice_pattern | struct_pattern | tuple_pattern | tuple_struct_pattern

_literal_pattern = boolean_literal | char_literal | float_literal | integer_literal | negative_literal | raw_string_literal | string_literal

_generic_type's_type = identifier | scoped_identifier | scoped_type_identifier | type_identifier

_type
type_parameters
type_arguments
parameters
parameter
identifier
arguments

function_item:
    # use `field` as index, convert it to a "raw-string"
    name: {name}                             
    type: {type}
    # use `type` as index, convert it to a "raw-string"
    visibility: visibility_modifier   
    function_modifiers: function_modifiers

let_declaration:
    left: {pattern}

binary_expression:
    right: {right}
    operator: {operator}

call_expression:
    function: {function}

field_expression:
    value: {value}
    field: {field}

parameters/parameter:
    type: "para"
    idx: $idx(this)

function_item/_type:
    type: "return_type"
    idx: $idx(this)

arguments/_expression:
    type: "arg"
    idx: $idx(this)

generic_type/_generic_type's_type:
    type: "type"

type_arguments/_type_arguments:
    type: "type_arg"
    idx: $idx(this)

let_declaration/_pattern:
    type: "left"
    idx: $idx(this)