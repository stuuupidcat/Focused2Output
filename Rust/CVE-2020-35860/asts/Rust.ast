lang: Rust
file: CVE-2020-35860
::ROOT
└── src::DIRECTORY
    └── lib.rs::FILE
        ├── ops::Deref::scoped_identifier
        │   ├── ops::identifier
        │   └── Deref::identifier
        ├── impl DisposeRef for str { type RefTo = c_char; }::impl_item PROP:{trait:"DisposeRef"}
        │   ├── str::primitive_type EDGE:~target[]~
        │   ├── DisposeRef::type_identifier EDGE:~target[]~
        │   ├── c_char::type_identifier EDGE:~target[]~
        │   └── RefTo::type_identifier EDGE:~target[]~
        ├── std::identifier
        ├── ffi::CStr::scoped_identifier
        │   ├── CStr::identifier
        │   └── ffi::identifier
        ├── r. pub unsafe fn unwrap(self) -> *mut D::RefTo { let ptr = self.ptr; std::mem::forget(self); ptr } }::impl_item
        │   ├── always::identifier
        │   ├── always::identifier
        │   ├── always::identifier
        │   ├── new::function_item PROP:{visibility:"pub"}
        │   │   ├── new::identifier
        │   │   ├── CBox::type_identifier EDGE:~return_type[idx=0]~
        │   │   ├── Self::type_identifier EDGE:~return_type[idx=0]~
        │   │   ├── (ptr: *mut D::RefTo)::parameters
        │   │   │   └── ptr: *mut D::RefTo::parameter EDGE:~para[idx=0]~
        │   │   │       ├── *mut D::RefTo::pointer_type
        │   │   │       │   └── D::RefTo::scoped_type_identifier
        │   │   │       │       ├── D::identifier
        │   │   │       │       └── RefTo::type_identifier
        │   │   │       └── ptr::identifier
        │   │   └── ptr::identifier
        │   ├── D::type_identifier EDGE:~target[]~
        │   ├── inline::identifier
        │   ├── inline::identifier
        │   ├── inline::identifier
        │   ├── DisposeRef::type_identifier EDGE:~target[]~
        │   ├── as_ptr::function_item PROP:{visibility:"pub",function_modifiers:"unsafe"}
        │   │   ├── as_ptr::identifier
        │   │   ├── self.ptr::field_expression
        │   │   │   └── ptr::field_identifier EDGE:~field[]~
        │   │   ├── *mut D::RefTo::pointer_type EDGE:~return_type[idx=0]~
        │   │   │   └── D::RefTo::scoped_type_identifier
        │   │   │       ├── D::identifier
        │   │   │       └── RefTo::type_identifier
        │   │   └── (&self)::parameters
        │   ├── <D:?Sized>::type_parameters
        │   │   ├── ?Sized::removed_trait_bound
        │   │   │   └── Sized::type_identifier
        │   │   └── D::type_identifier
        │   ├── CBox<D>::generic_type EDGE:~target[]~
        │   │   ├── <D>::type_arguments
        │   │   │   └── D::type_identifier EDGE:~type_arg[idx=0]~
        │   │   └── CBox::type_identifier EDGE:~type[]~
        │   └── unwrap::function_item PROP:{visibility:"pub",function_modifiers:"unsafe"}
        │       ├── (self)::parameters
        │       ├── self.ptr::field_expression
        │       │   └── ptr::field_identifier EDGE:~field[]~
        │       ├── *mut D::RefTo::pointer_type EDGE:~return_type[idx=0]~
        │       │   └── D::RefTo::scoped_type_identifier
        │       │       ├── D::identifier
        │       │       └── RefTo::type_identifier
        │       ├── std::mem::forget(self)::call_expression PROP:{function:"std::mem::forget"}
        │       │   ├── (self)::arguments
        │       │   └── std::mem::forget::scoped_identifier
        │       │       ├── forget::identifier
        │       │       └── std::mem::scoped_identifier
        │       │           ├── std::identifier
        │       │           └── mem::identifier
        │       ├── unwrap::identifier
        │       ├── ptr::identifier
        │       └── ptr::identifier
        ├── c_char::identifier
        ├── libc::identifier
        ├── libc::identifier
        ├── { unsafe { let text = CStr::from_ptr(self.ptr); std::str::from_utf8_unchecked(text.to_bytes()) } } }::impl_item PROP:{trait:"Deref"}
        │   ├── str::primitive_type EDGE:~target[]~
        │   ├── CBox<str>::generic_type EDGE:~target[]~
        │   │   ├── CBox::type_identifier EDGE:~type[]~
        │   │   └── <str>::type_arguments
        │   │       └── str::primitive_type EDGE:~type_arg[idx=0]~
        │   ├── Target::type_identifier EDGE:~target[]~
        │   ├── deref::function_item
        │   │   ├── std::str::from_utf8_unchecked(text.to_bytes())::call_expression PROP:{function:"std::str::from_utf8_unchecked"}
        │   │   │   ├── (text.to_bytes())::arguments
        │   │   │   │   └── text.to_bytes()::call_expression PROP:{function:"text.to_bytes"} EDGE:~arg[idx=0]~
        │   │   │   │       ├── ()::arguments
        │   │   │   │       └── text.to_bytes::field_expression
        │   │   │   │           ├── to_bytes::field_identifier EDGE:~field[]~
        │   │   │   │           └── text::identifier EDGE:~value[]~
        │   │   │   └── std::str::from_utf8_unchecked::scoped_identifier
        │   │   │       ├── std::str::scoped_identifier
        │   │   │       │   ├── str::identifier
        │   │   │       │   └── std::identifier
        │   │   │       └── from_utf8_unchecked::identifier
        │   │   ├── deref::identifier
        │   │   ├── CStr::from_ptr(self.ptr)::call_expression PROP:{function:"CStr::from_ptr"}
        │   │   │   ├── CStr::from_ptr::scoped_identifier
        │   │   │   │   ├── CStr::identifier
        │   │   │   │   └── from_ptr::identifier
        │   │   │   └── (self.ptr)::arguments
        │   │   │       └── self.ptr::field_expression EDGE:~arg[idx=0]~
        │   │   │           └── ptr::field_identifier EDGE:~field[]~
        │   │   ├── &str::reference_type EDGE:~return_type[idx=0]~
        │   │   │   └── str::primitive_type
        │   │   ├── (&self)::parameters
        │   │   └── text::identifier
        │   ├── <'a>::type_parameters
        │   │   └── a::identifier
        │   └── Deref::type_identifier EDGE:~target[]~
        ├── c_void::identifier
        ├── DisposeRef::type_identifier
        ├── CBox::struct_item PROP:{visibility:"pub"}
        │   ├── D::type_identifier
        │   ├── DisposeRef::type_identifier
        │   ├── CBox::type_identifier
        │   ├── <D:?Sized>::type_parameters
        │   │   ├── ?Sized::removed_trait_bound
        │   │   │   └── Sized::type_identifier
        │   │   └── D::type_identifier
        │   └── pub ptr: *mut D::RefTo::field_declaration
        │       ├── *mut D::RefTo::pointer_type EDGE:~type[]~
        │       │   └── D::RefTo::scoped_type_identifier
        │       │       ├── D::identifier
        │       │       └── RefTo::type_identifier
        │       └── ptr::field_identifier EDGE:~name[]~
        ├── dispose::function_item PROP:{function_modifiers:"unsafe"}
        │   ├── free(ptr as *mut c_void)::call_expression PROP:{function:"free"}
        │   │   ├── (ptr as *mut c_void)::arguments
        │   │   │   ├── *mut c_void::pointer_type
        │   │   │   │   └── c_void::type_identifier
        │   │   │   └── ptr::identifier EDGE:~arg[idx=0]~
        │   │   └── free::identifier
        │   ├── dispose::identifier
        │   └── (ptr: *mut Self::RefTo)::parameters
        │       └── ptr: *mut Self::RefTo::parameter EDGE:~para[idx=0]~
        │           ├── *mut Self::RefTo::pointer_type
        │           │   └── Self::RefTo::scoped_type_identifier
        │           │       ├── Self::identifier
        │           │       └── RefTo::type_identifier
        │           └── ptr::identifier
        ├── RefTo::type_identifier
        └── free::identifier
