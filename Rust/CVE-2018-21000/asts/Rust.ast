lang: Rust
file: CVE-2018-21000
::ROOT
└── src::DIRECTORY
    └── main.rs::FILE
        ├── guarded_transmute_vec_permissive::function_item PROP:{visibility:"pub",function_modifiers:"unsafe"}
        │   ├── guarded_transmute_vec_permissive::identifier
        │   ├── forget(bytes)::call_expression PROP:{function:"forget"}
        │   │   ├── forget::identifier
        │   │   └── (bytes)::arguments
        │   │       └── bytes::identifier
        │   ├── (mut bytes: Vec<u8>)::parameters
        │   │   └── mut bytes: Vec<u8>::parameter EDGE:~arg[idx=0]~
        │   │       ├── Vec<u8>::generic_type
        │   │       │   ├── <u8>::type_arguments
        │   │       │   │   └── u8::primitive_type
        │   │       │   └── Vec::type_identifier
        │   │       └── bytes::identifier
        │   ├── let ptr = bytes.as_mut_ptr();::let_declaration PROP:{left:"ptr"}
        │   │   ├── bytes.as_mut_ptr()::call_expression PROP:{function:"bytes.as_mut_ptr"}
        │   │   │   ├── bytes.as_mut_ptr::field_expression PROP:{field:"as_mut_ptr",value:"bytes"}
        │   │   │   │   └── bytes::identifier
        │   │   │   └── ()::arguments
        │   │   └── ptr::identifier
        │   ├── Vec::from_raw_parts(ptr as *mut T, capacity, len)::call_expression PROP:{function:"Vec::from_raw_parts"}
        │   │   ├── from_raw_parts::identifier
        │   │   ├── Vec::identifier
        │   │   └── (ptr as *mut T, capacity, len)::arguments
        │   │       ├── len::identifier
        │   │       ├── *mut T::pointer_type
        │   │       │   └── T::type_identifier
        │   │       ├── capacity::identifier
        │   │       └── ptr::identifier
        │   ├── <T>::type_parameters
        │   │   └── T::type_identifier
        │   ├── let capacity = bytes.capacity() / size_of::<T>();::let_declaration PROP:{left:"capacity"}
        │   │   ├── bytes.capacity() / size_of::<T>()::binary_expression PROP:{right:"size_of::<T>()",operator:"/"}
        │   │   │   ├── bytes.capacity()::call_expression PROP:{function:"bytes.capacity"}
        │   │   │   │   ├── bytes.capacity::field_expression PROP:{field:"capacity",value:"bytes"}
        │   │   │   │   │   └── bytes::identifier
        │   │   │   │   └── ()::arguments
        │   │   │   └── size_of::<T>()::call_expression PROP:{function:"size_of::<T>"}
        │   │   │       ├── ()::arguments
        │   │   │       ├── size_of::identifier
        │   │   │       └── <T>::type_arguments
        │   │   │           └── T::type_identifier
        │   │   └── capacity::identifier
        │   ├── let len = bytes.len() / size_of::<T>();::let_declaration PROP:{left:"len"}
        │   │   ├── bytes.len() / size_of::<T>()::binary_expression PROP:{right:"size_of::<T>()",operator:"/"}
        │   │   │   ├── bytes.len()::call_expression PROP:{function:"bytes.len"}
        │   │   │   │   ├── ()::arguments
        │   │   │   │   └── bytes.len::field_expression PROP:{field:"len",value:"bytes"}
        │   │   │   │       └── bytes::identifier
        │   │   │   └── size_of::<T>()::call_expression PROP:{function:"size_of::<T>"}
        │   │   │       ├── ()::arguments
        │   │   │       ├── size_of::identifier
        │   │   │       └── <T>::type_arguments
        │   │   │           └── T::type_identifier
        │   │   └── len::identifier
        │   ├── PermissiveGuard::check::<T>(&bytes).unwrap()::call_expression PROP:{function:"PermissiveGuard::check::<T>(&bytes).unwrap"}
        │   │   ├── ()::arguments
        │   │   └── PermissiveGuard::check::<T>(&bytes).unwrap::field_expression PROP:{field:"unwrap",value:"PermissiveGuard::check::<T>(&bytes)"}
        │   │       └── PermissiveGuard::check::<T>(&bytes)::call_expression PROP:{function:"PermissiveGuard::check::<T>"}
        │   │           ├── <T>::type_arguments
        │   │           │   └── T::type_identifier
        │   │           ├── (&bytes)::arguments
        │   │           │   └── bytes::identifier
        │   │           ├── check::identifier
        │   │           └── PermissiveGuard::identifier
        │   └── Vec<T>::generic_type
        │       ├── Vec::type_identifier
        │       └── <T>::type_arguments
        │           └── T::type_identifier
        └── guarded_transmute_to_bytes_vec::function_item PROP:{visibility:"pub",function_modifiers:"unsafe"}
            ├── Vec::from_raw_parts(ptr as *mut u8, capacity, len)::call_expression PROP:{function:"Vec::from_raw_parts"}
            │   ├── from_raw_parts::identifier
            │   ├── Vec::identifier
            │   └── (ptr as *mut u8, capacity, len)::arguments
            │       ├── len::identifier
            │       ├── *mut u8::pointer_type
            │       │   └── u8::primitive_type
            │       ├── capacity::identifier
            │       └── ptr::identifier
            ├── let ptr = from.as_mut_ptr();::let_declaration PROP:{left:"ptr"}
            │   ├── from.as_mut_ptr()::call_expression PROP:{function:"from.as_mut_ptr"}
            │   │   ├── ()::arguments
            │   │   └── from.as_mut_ptr::field_expression PROP:{field:"as_mut_ptr",value:"from"}
            │   │       └── from::identifier
            │   └── ptr::identifier
            ├── Vec<u8>::generic_type
            │   ├── <u8>::type_arguments
            │   │   └── u8::primitive_type
            │   └── Vec::type_identifier
            ├── <T>::type_parameters
            │   └── T::type_identifier
            ├── let capacity = from.capacity() * size_of::<T>();::let_declaration PROP:{left:"capacity"}
            │   ├── from.capacity() * size_of::<T>()::binary_expression PROP:{right:"size_of::<T>()",operator:"*"}
            │   │   ├── from.capacity()::call_expression PROP:{function:"from.capacity"}
            │   │   │   ├── ()::arguments
            │   │   │   └── from.capacity::field_expression PROP:{field:"capacity",value:"from"}
            │   │   │       └── from::identifier
            │   │   └── size_of::<T>()::call_expression PROP:{function:"size_of::<T>"}
            │   │       ├── ()::arguments
            │   │       ├── size_of::identifier
            │   │       └── <T>::type_arguments
            │   │           └── T::type_identifier
            │   └── capacity::identifier
            ├── forget(from)::call_expression PROP:{function:"forget"}
            │   ├── forget::identifier
            │   └── (from)::arguments
            │       └── from::identifier
            ├── guarded_transmute_to_bytes_vec::identifier
            ├── (mut from: Vec<T>)::parameters
            │   └── mut from: Vec<T>::parameter EDGE:~arg[idx=0]~
            │       ├── from::identifier
            │       └── Vec<T>::generic_type
            │           ├── Vec::type_identifier
            │           └── <T>::type_arguments
            │               └── T::type_identifier
            └── let len = from.len() * size_of::<T>();::let_declaration PROP:{left:"len"}
                ├── len::identifier
                └── from.len() * size_of::<T>()::binary_expression PROP:{right:"size_of::<T>()",operator:"*"}
                    ├── from.len()::call_expression PROP:{function:"from.len"}
                    │   ├── ()::arguments
                    │   └── from.len::field_expression PROP:{field:"len",value:"from"}
                    │       └── from::identifier
                    └── size_of::<T>()::call_expression PROP:{function:"size_of::<T>"}
                        ├── ()::arguments
                        ├── size_of::identifier
                        └── <T>::type_arguments
                            └── T::type_identifier
