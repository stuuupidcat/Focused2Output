.type Capture = ZeroCap {}
              | TransmuteFuncDefCap {inputParaType: symbol, transmuteFuncName: symbol, outputTypeArguments: symbol, transmuteFuncDef: symbol, outputVecType: symbol, outputVecDeclaration: symbol, inputVecType: symbol, capDeclaration: symbol, lenDeclaration: symbol, inputVecName: symbol, ptrDeclaration: symbol}
              | LenDeclarationCap {transmuteFuncDef: symbol, bexp: symbol, fexp: symbol, right: symbol, lenName: symbol, lenDeclaration: symbol, inputVecName: symbol, operator: symbol}
              | OutputVecDeclarationFullCap {path: symbol, transmuteFuncDef: symbol, capName: symbol, outputVecDeclaration: symbol, lenName: symbol, ptrName: symbol}
              | OutputVecDeclarationPartCap {transmuteFuncDef: symbol, capName: symbol, outputVecDeclaration: symbol, lenName: symbol, ptrName: symbol}
              | CapDeclarationCap {transmuteFuncDef: symbol, capName: symbol, bexp: symbol, fexp: symbol, right: symbol, capDeclaration: symbol, inputVecName: symbol, operator: symbol}
              | OutputVecDeclarationCap {transmuteFuncDef: symbol, capName: symbol, outputVecDeclaration: symbol, lenName: symbol, ptrName: symbol}
              | PtrDeclarationCap {transmuteFuncDef: symbol, fexp: symbol, ptrName: symbol, inputVecName: symbol, ptrDeclaration: symbol}

.type Branch = ZeroBranch {}
             | OutputVecDeclarationBr {_0: symbol, _1: symbol, _2: symbol}
             | TransmuteFuncDefBr {_0: symbol, _1: symbol, _2: symbol, _3: symbol, _4: symbol, _5: symbol, _6: symbol}
             | OutputVecDeclarationPartBr {_0: symbol, _1: symbol, _2: symbol, _3: symbol}
             | PtrDeclarationBr {_0: symbol, _1: symbol, _2: symbol}
             | CapDeclarationBr {_0: symbol, _1: symbol, _2: symbol, _3: symbol, _4: symbol}
             | OutputVecDeclarationFullBr {_0: symbol, _1: symbol, _2: symbol, _3: symbol}
             | LenDeclarationBr {_0: symbol, _1: symbol, _2: symbol, _3: symbol, _4: symbol}

.type URI = [
    lang: symbol,
    file: symbol,
    element: symbol,
    branches: Branch,
    caps: Capture
]

.decl CapDeclaration(uri:URI)
.decl OutputVecDeclarationFull(uri:URI)
.decl OutputVecDeclarationPart(uri:URI)
.decl TransmuteFuncDef(uri:URI)
.decl PtrDeclaration(uri:URI)
.decl LenDeclaration(uri:URI)
.decl OutputVecDeclaration(uri:URI)
.input CapDeclaration
.input OutputVecDeclarationFull
.input OutputVecDeclarationPart
.input TransmuteFuncDef
.input PtrDeclaration
.input LenDeclaration
.input OutputVecDeclaration

.comp Main {
    .decl OutputVecDef(param0:URI)
    .decl TransmuteFunc(param0:URI)
    OutputVecDef(output_vec_def) :- ( OutputVecDeclarationFull(output_vec_def), output_vec_def=[_attrOutput_vec_defLang,_attrOutput_vec_defFile,_attrOutput_vec_defElement,_attrOutput_vec_defBr,_capoutput_vec_def] ; OutputVecDeclarationPart(output_vec_def), output_vec_def=[_attrOutput_vec_defLang,_attrOutput_vec_defFile,_attrOutput_vec_defElement,_attrOutput_vec_defBr,_capoutput_vec_def] ).
    TransmuteFunc(output_vec_def) :- TransmuteFuncDef(func_item), func_item=[_attrFunc_itemLang,_attrFunc_itemFile,_attrFunc_itemElement,_attrFunc_itemBr,$TransmuteFuncDefCap(_capFunc_itemInputParaType,_capFunc_itemTransmuteFuncName,_capFunc_itemOutputTypeArguments,_capFunc_itemTransmuteFuncDef,_capFunc_itemOutputVecType,_capFunc_itemOutputVecDeclaration,_capFunc_itemInputVecType,_capFunc_itemCapDeclaration,_capFunc_itemLenDeclaration,capFunc_itemInputVecName,_capFunc_itemPtrDeclaration)], PtrDeclaration(ptr_decl), ptr_decl=[_attrPtr_declLang,_attrPtr_declFile,_attrPtr_declElement,_attrPtr_declBr,$PtrDeclarationCap(_capPtr_declTransmuteFuncDef,_capPtr_declFexp,capPtr_declPtrName,capPtr_declInputVecName,_capPtr_declPtrDeclaration)], CapDeclaration(cap_decl), cap_decl=[_attrCap_declLang,_attrCap_declFile,_attrCap_declElement,_attrCap_declBr,$CapDeclarationCap(_capCap_declTransmuteFuncDef,capCap_declCapName,_capCap_declBexp,_capCap_declFexp,_capCap_declRight,_capCap_declCapDeclaration,capCap_declInputVecName,_capCap_declOperator)], LenDeclaration(len_decl), len_decl=[_attrLen_declLang,_attrLen_declFile,_attrLen_declElement,_attrLen_declBr,$LenDeclarationCap(_capLen_declTransmuteFuncDef,_capLen_declBexp,_capLen_declFexp,_capLen_declRight,capLen_declLenName,_capLen_declLenDeclaration,capLen_declInputVecName,_capLen_declOperator)], OutputVecDef(output_vec_def), ( output_vec_def=[_attrOutput_vec_defLang,_attrOutput_vec_defFile,_attrOutput_vec_defElement,_attrOutput_vec_defBr,$OutputVecDeclarationFullCap(_capOutput_vec_defPath,_capOutput_vec_defTransmuteFuncDef,capOutput_vec_defCapName,_capOutput_vec_defOutputVecDeclaration,capOutput_vec_defLenName,capOutput_vec_defPtrName)]; output_vec_def=[_attrOutput_vec_defLang,_attrOutput_vec_defFile,_attrOutput_vec_defElement,_attrOutput_vec_defBr,$OutputVecDeclarationPartCap(_capOutput_vec_defTransmuteFuncDef,capOutput_vec_defCapName,_capOutput_vec_defOutputVecDeclaration,capOutput_vec_defLenName,capOutput_vec_defPtrName)] ), capFunc_itemInputVecName=capPtr_declInputVecName, capFunc_itemInputVecName=capCap_declInputVecName, capFunc_itemInputVecName=capLen_declInputVecName, capOutput_vec_defPtrName=capPtr_declPtrName, capOutput_vec_defCapName=capCap_declCapName, capOutput_vec_defLenName=capLen_declLenName.
}
.init mainInstance = Main
.output mainInstance.TransmuteFunc(IO=file, rfc4180=true)

