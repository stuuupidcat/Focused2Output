[Elements]

TransmuteFuncDef:
    lang: Rust
    file: (transmuteFuncDef).rs
    element: (transmuteFuncName)::function_item#func
    branches:
        - @func//**/~para[idx=0]~/**//(inputParaType)::generic_type//**/~type_arg[idx=0]~/(inputVecType)
        - @func//**/~para[idx=0]~/**//(inputVecName)::identifier
        - @func/~return_type[idx=0]~/(outputTypeArguments)//**/~type_arg[idx=0]~/(outputVecType)
        - @func//**//(ptrDeclaration)::let_declaration
        - @func//**//(capDeclaration)::let_declaration
        - @func//**//(lenDeclaration)::let_declaration
        - @func//**//(outputVecDeclaration)::call_expression

TransmuteFuncDefWithForget: TransmuteFuncDef
    branches:
        - @func//**//(forgetOriginPtr)::call_expression

PtrDeclaration:
    lang: Rust
    file: (transmuteFuncDef).rs
    element: (ptrDeclaration)::let_declaration#let
    branches:
        - @let/~left[idx=0]~/(ptrName)
        - @let//**//(fexp)::field_expression/~value~/(inputVecName)
        - @let//**//(fexp)::field_expression/~field~/as_mut_ptr

CapDeclaration:
    lang: Rust
    file: (transmuteFuncDef).rs
    element: (capDeclaration)::let_declaration#let
    branches:
        - @let/~left[idx=0]~/(capName)
        - @let//**//(fexp)::field_expression/~value~/(inputVecName)
        - @let//**//(fexp)::field_expression/~field~/capacity
        - @let//(bexp)::binary_expression[right=(right)]
        - @let//(bexp)::binary_expression[operator=(operator)]

LenDeclaration:
    lang: Rust
    file: (transmuteFuncDef).rs
    element: (lenDeclaration)::let_declaration#let
    branches:
        - @let/~left[idx=0]~/(lenName)
        - @let//**//(fexp)::field_expression/~value~/(inputVecName)
        - @let//**//(fexp)::field_expression/~field~/len
        - @let//(bexp)::binary_expression[right=(right)]
        - @let//(bexp)::binary_expression[operator=(operator)]

OutputVecDeclaration:
    lang: Rust
    file: (transmuteFuncDef).rs
    element: (outputVecDeclaration)::call_expression#call[function=(path)from_raw_parts]
    branches:
        - @call//**/~arg[idx=0]~/(ptrName)
        - @call//**/~arg[idx=1]~/(lenName)
        - @call//**/~arg[idx=2]~/(capName)

ForgetOriginPtr:
    lang: Rust
    file: (transmuteFuncDef).rs
    element: (forgetOriginPtr)::call_expression#call[function=forget]
    branches:
        - @call//**/~arg[idx=0]~/(inputVecName)

[Links]
    Main {
    private:
        WithForget(elem):
            & TransmuteFuncDefWithForget(with_forget)
            & ForgetOriginPtr(forget_origin_ptr)
            & match(with_forget.branches[7], forget_origin_ptr.element)
            & match(elem, with_forget.element)
    public:
        ReversedParameter(func_item):
            & TransmuteFuncDefWithForget(func_item)
            & PtrDeclaration(ptr_decl)
            & CapDeclaration(cap_decl)
            & LenDeclaration(len_decl)
            & OutputVecDeclaration(output_vec_def)
            & ForgetOriginPtr(forget_origin_ptr)
            & match(func_item.branches[3], ptr_decl.element)
            & match(func_item.branches[4], cap_decl.element)
            & match(func_item.branches[5], len_decl.element)
            & match(func_item.branches[6], output_vec_def.element)
            & match(func_item.branches[7], forget_origin_ptr.element)
            & match(func_item[inputVecName], ptr_decl[inputVecName])
            & match(func_item[inputVecName], cap_decl[inputVecName])
            & match(func_item[inputVecName], len_decl[inputVecName])
            & match(output_vec_def[ptrName], ptr_decl[ptrName])
            & match(output_vec_def[lenName], len_decl[capName])
            & match(output_vec_def[capName], cap_decl[lenName])
            & match(func_item[inputVecName], forget_origin_ptr[inputVecName])
        
        WithoutForget(func_item):
            & TransmuteFuncDef(func_item)
            & !WithForget(func_item.element)
            & PtrDeclaration(ptr_decl)
            & CapDeclaration(cap_decl)
            & LenDeclaration(len_decl)
            & OutputVecDeclaration(output_vec_def)
            & match(func_item.branches[3], ptr_decl.element)
            & match(func_item.branches[4], cap_decl.element)
            & match(func_item.branches[5], len_decl.element)
            & match(func_item.branches[6], output_vec_def.element)
            & match(func_item[inputVecName], ptr_decl[inputVecName])
            & match(func_item[inputVecName], cap_decl[inputVecName])
            & match(func_item[inputVecName], len_decl[inputVecName])
            & match(output_vec_def[ptrName], ptr_decl[ptrName])
            & match(output_vec_def[lenName], len_decl[lenName])
            & match(output_vec_def[capName], cap_decl[capName])
    } 


